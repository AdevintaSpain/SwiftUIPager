// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-macos10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SwiftUIPager
import CoreGraphics
import Foundation
import Swift
import SwiftUI
@_exported import SwiftUIPager
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum GesturePriority {
  case high
  case simultaneous
  case normal
  public static func == (a: SwiftUIPager.GesturePriority, b: SwiftUIPager.GesturePriority) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum SwipeInteractionArea {
  case allAvailable
  case page
  public static func == (a: SwiftUIPager.SwipeInteractionArea, b: SwiftUIPager.SwipeInteractionArea) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Pager {
  public typealias DraggingResult = (page: Swift.Int, newPage: Swift.Int, translation: CoreGraphics.CGFloat, velocity: Swift.Double)
  public func pagingAnimation(_ value: ((SwiftUIPager.Pager<Element, ID, PageView>.DraggingResult) -> SwiftUIPager.PagingAnimation)?) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func multiplePagination() -> SwiftUIPager.Pager<Element, ID, PageView>
  public func contentLoadingPolicy(_ value: SwiftUIPager.ContentLoadingPolicy) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func loopPages(_ value: Swift.Bool = true, repeating count: Swift.UInt = 1) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func disableDragging() -> SwiftUIPager.Pager<Element, ID, PageView>
  public func allowsDragging(_ value: Swift.Bool = true) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func pagingPriority(_ value: SwiftUIPager.GesturePriority) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func swipeInteractionArea(_ value: SwiftUIPager.SwipeInteractionArea) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func alignment(_ value: SwiftUIPager.PositionAlignment) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func horizontal(_ swipeDirection: SwiftUIPager.HorizontalSwipeDirection = .leftToRight) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func vertical(_ swipeDirection: SwiftUIPager.VerticalSwipeDirection = .topToBottom) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func interactive(_ scale: CoreGraphics.CGFloat) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func rotation3D(_ value: Swift.Bool = true) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func pageOffset(_ value: Swift.Double) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func itemSpacing(_ value: CoreGraphics.CGFloat) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func itemAspectRatio(_ value: CoreGraphics.CGFloat?, alignment: SwiftUIPager.PositionAlignment = .center) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func preferredItemSize(_ value: CoreGraphics.CGSize, alignment: SwiftUIPager.PositionAlignment = .center) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func expandPageToEdges() -> SwiftUIPager.Pager<Element, ID, PageView>
  public func onPageChanged(_ callback: ((Swift.Int) -> Swift.Void)?) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func padding(_ length: CoreGraphics.CGFloat) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func padding(_ insets: SwiftUI.EdgeInsets) -> SwiftUIPager.Pager<Element, ID, PageView>
  public func padding(_ edges: SwiftUI.Edge.Set = .all, _ length: CoreGraphics.CGFloat? = nil) -> SwiftUIPager.Pager<Element, ID, PageView>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum ContentLoadingPolicy : Swift.Equatable {
  case lazy(recyclingRatio: Swift.UInt)
  case eager
  public static func == (a: SwiftUIPager.ContentLoadingPolicy, b: SwiftUIPager.ContentLoadingPolicy) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public struct Pager<Element, ID, PageView> : SwiftUI.View where Element : Swift.Equatable, ID : Swift.Hashable, PageView : SwiftUI.View {
  public init(page: SwiftUI.Binding<Swift.Int>, data: [Element], id: Swift.KeyPath<Element, ID>, @SwiftUI.ViewBuilder content: @escaping (Element) -> PageView)
  public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12SwiftUIPager5PagerV4bodyQrvp", 0) ðŸ¦¸<Element, ID, PageView>
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension Pager where Element : Swift.Identifiable, ID == Element.ID {
  public init(page: SwiftUI.Binding<Swift.Int>, data: [Element], @SwiftUI.ViewBuilder content: @escaping (Element) -> PageView)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum HorizontalSwipeDirection {
  case leftToRight
  case rightToLeft
  public static func == (a: SwiftUIPager.HorizontalSwipeDirection, b: SwiftUIPager.HorizontalSwipeDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum VerticalSwipeDirection {
  case topToBottom
  case bottomToTop
  public static func == (a: SwiftUIPager.VerticalSwipeDirection, b: SwiftUIPager.VerticalSwipeDirection) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PositionAlignment {
  case center
  case justified(CoreGraphics.CGFloat)
  case start(CoreGraphics.CGFloat)
  case end(CoreGraphics.CGFloat)
  public static var start: SwiftUIPager.PositionAlignment {
    get
  }
  public static var end: SwiftUIPager.PositionAlignment {
    get
  }
  public static var justified: SwiftUIPager.PositionAlignment {
    get
  }
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
public enum PagingAnimation : Swift.Equatable {
  case steep(duration: Foundation.TimeInterval)
  case standard(duration: Foundation.TimeInterval)
  case custom(animation: SwiftUI.Animation)
  public static var standard: SwiftUIPager.PagingAnimation
  public static var steep: SwiftUIPager.PagingAnimation
  public static func == (a: SwiftUIPager.PagingAnimation, b: SwiftUIPager.PagingAnimation) -> Swift.Bool
}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.GesturePriority : Swift.Equatable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.GesturePriority : Swift.Hashable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.SwipeInteractionArea : Swift.Equatable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.SwipeInteractionArea : Swift.Hashable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.HorizontalSwipeDirection : Swift.Equatable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.HorizontalSwipeDirection : Swift.Hashable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.VerticalSwipeDirection : Swift.Equatable {}
@available(iOS 13.0, OSX 10.15, tvOS 13.0, watchOS 6.0, *)
extension SwiftUIPager.VerticalSwipeDirection : Swift.Hashable {}
